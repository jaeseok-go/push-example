version: '3.9'
services:

  mysql:
    container_name: mysql
    build:
      context: mysql
      dockerfile: Dockerfile
    restart: unless-stopped                         # 임의로 정지하지 않는한 항상 재시작
    ports:
      - '3306:3306'
    volumes:
      - ./mysql/mysql_data:/var/lib/mysql           # 컨테이너에 저장되는 데이터를 로컬에 마운팅
      - ./mysql/sql/:/docker-entrypoint-initdb.d/   # docker container init 시점에 실행될 sql 마운팅
    environment:
      MYSQL_ROOT_PASSWORD: jaeseok
      MYSQL_DATABASE: cicdapp
    networks:
      - push-net

  redis:
    container_name: redis
    image: 'redis:7.2.1-alpine'
    ports:
      - '127.0.0.1:6379:6379/tcp'
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - push-net

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - '2181:2181'

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.5.1
    hostname: broker
    ports:
      - '9092:9092'
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092" ]
      interval: 30s
      timeout: 5s
      retries: 3
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - push-net

  push-client:
    container_name: push-client
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - '8888:8888'
    networks:
      - push-net
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  push-server:
    container_name: push-server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    networks:
      - push-net
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

networks:
  push-net:
